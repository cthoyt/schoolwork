#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 76 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 5289 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 194
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname |Prob"
 #"lem Set #6 Part 2|) (read-case-sensitive #t) (teachpacks ()) (htdp-s"
 #"ettings #(#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 17 3 21 #";Problem Set 6 HONORS"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";Authors:"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";Charles Hoyt - hoyt.ch@husky.neu.edu"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";Brett Krutiansky - krutiansky.b@husky.neu.edu"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; PROBLEM 1 - Rewrite Hungry Henry to fix mistakes"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";Imports, Constants, and Structures:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-BORDER"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"HENRY-PIC"
0 0 23 3 1 #" "
0 2          15 55 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           2 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\20\0\0\0\21\b"
 #"\6\0\0\0\324\257,\304\0\0\2\371IDAT8\215mS;Kk[\30"
 #"\234\265\366&\6\265\311=\20\301\250A\bV\21\213\250\1%X\tVjco"
 #"!\344w\330h\251\225\245Z\370\300G\247\0266)LP\24\203(\212hR\4"
 #"\"\21\342&97\233\274t\2555\267\310M8\27\356T\337\a3|\217a\240"
 #"\265\2461\206m\334\335\335\361\364\364\224"
 #"Zk*\245\250\265\346\317\317\17I\262X,\262\321ht\270ZkJ)%\204"
 #"\20h4\32\0\200B\241\200`0\210\227\227\27X\226\5)%H\"\227\313\341"
 #"\344\344\4\245R\t$\1\0B\b\330$!\204\200\327\353\205\3438\250T*p"
 #"]\27\3\3\3x{{CWW\27>>>\220L&188\bc\f\264"
 #"\326\260m\e$a\ecZ\205m#"
 #"\227\313\301\347\363\341\372\372\32\331l\26"
 #"\311d\22\211D\2\0000;;\213j\265\212H$\202@ \0\245\24l\333\206"
 #"l\257\371\374\374\214x<\216@ \200"
 #"\361\361q\254\256\256\"\26\213!\221H`gg\a}}}(\227\313p]\267"
 #"s\202R\n \311t:M\0\4\300\345\345e\2\340\326\326\26I\362\363\363\223"
 #"___|\177\177\347\371\3719\17\17"
 #"\17\377\363t\224\313e\6\203A\2\340"
 #"\320\320\20-\313\242eY\234\237\237g"
 #"\245R\341\361\3611\327\326\326X\253\325"
 #"\230\317\347\271\273\273\313\203\203\3^]]\321q\34bcc\243#\6\300P("
 #"D\0\234\233\233\243R\212$;6\266-\277\277\277'\0\356\355\355Q\306b1"
 #",,, \237\317cxx\30\331l\26\0\20\215F\1\0\306\30\330\266\215|"
 #">\217L&\203R\251\4\307q\20\217\307\341"
 #"\367\373\201B\241\300\221\221\21NLLPJ\311"
) 318
(
 #"\245\245%\336\336\336R)\305\357\357o"
 #"\32c\230J\245833C\277\337\317"
 #"\311\311I\36\35\35\361\346\346\206\245R"
 #"\211\342\351\351\211\265Z\r\353\353\353\350"
 #"\355\355\305\366\3666<\36\17\376\304\353"
 #"\353+\232\315&\\\327\305\376\376>\302\3410\246\246\246066\6{tt\24"
 #"\365z\35>\237\17\233\233\233\360x<\250\327\353\260m\e\265Z\rggg\360"
 #"x<\350\356\356\206\327\353\305\342\342\".//\21\211D`YV\313\306b\261"
 #"\310t:\315\266\245\217\217\217t\34\207"
 #"\361x\234\311d\222\325j\225\306\30\272"
 #"\256\313T*\305L&C\2555\233\315&\305\277\337\205eY\250\327\353xxx"
 #"@\265Z\305\305\305\5VVV\20\16\207\241\224\202eY \t)%\2141\20"
 #"B@\b\1\331\26\223\204\326\32\321h\24\211D\2\241P\250#\266m\273E\226"
 #"\22J)\b!@\262\25\1)%\0\200$zzz \204\300\364\3644\372\373"
 #"\373\377wb;D\355\224\nMC\0\20\02004\220B\342\367\337\277\241\265\306"
 #"\257\277~\301\260%\376\23\2\255\236 \376\1\217\31\36"
 #"\n\343gW\226\0\0\0\0IEND\256B`\202"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 1 #" "
0 2          15 55 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           2 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\17\0\0\0\17\b"
 #"\6\0\0\0;\326\225J\0\0\2\261IDAT(\221%\316Ko\224U\34"
 #"\300\341\3379\347\275\315\2753\3662\5ki\300\230&\340\2\213$T\223\22$"
 #"MPW.\210\356t%\37\200\255&~\e\27\304\27071\221(\30\25A4"
 #"%u\246uh\2473\224v:\235\333;\357\345\274\177\27<\237\340Q\"\211\200"
 #"FR\2152\220I\212\322\200\30\254RX^\321\222\341* \265`\24\242@\211"
 #"XIl\2066\16\221\0\nR\240w\0321\30\305\210\347S\251z\224\35p\1"
 #"\37\310\342\b\337sQV2IQ\f2\350\16CZ\207\2474\367\17\351\365#"
 #"\374|\225\343\301\24\353\n\313\27f9"
 #"\177\246\302Z-O\25\b\4\234\24\305\24\330iw\230\230<Nq\36\267\354\223"
 #"s\25\371\322\fGQ\a\345\303a\342\362\367\203\307\354.T\371dm\225b\2"
 #"j,\"/\6\23Be8\215\f\317\17FDR\300\270.\215f\237\331j@"
 #"\26(\232\275\3\234\212\317(\354\263R"
 #"\366\371\342\362y\364p\2320\34\217\310"
 #"\225|\22\233\261\177\320\245\20\270\330\b"
 #"N^\276\0I\251\226}\264v\310\264"
 #"\213-\227\371\255\261Mw\224\240\367["
 #"\r\216^v\210S\20\317\341\354\e\313"
 #"`\300J\312\265\367\336\"v\25}\v\265\327\27\b*\1Q\330\247\337m\243F"
 #"\23\264\e\207<}\370\vv\320c\276\244\251\325r<\331zJ\230\r\360k\20"
 #"\352\230\277\232\317\20\235\22\17\2178\331"
 #"\372\235\342\270K\321d\350\267/\274I"
 #"\332n\363\350\273o\211[M\262\344\210\225\325\263T\226fh\366\6H\33603"
 #"W\241\265\263\315\336\243\237Y\352"
 #"\377\313\207\347J\234\233\253\340`<676\370\346"
 #"\353\257\330\333m\261\270v\25\267\276\300I7\303Z"
) 246
(
 #"AB0\341\4\247wH\376\370?\206\333O\270\371\321]\220\4\a\355q\361\312"
 #":\256\311\363\343\275{\254n\375\311\342"
 #"\362<\221J\3005\270N@I;\244\247}\332\215]\362A\225\372\322%\304f"
 #"8h\5\271\34\227\336\271\314\17\337\357"
 #"\260\367\354\37\32\217\357\343\25\2\274\300"
 #"\305(\2078\216\31L&t\372!\267>\375\222\240P\3R4\32 \343\335\215"
 #"\367\231\370>\314/\341\234Y\305\231\275"
 #"\310\324[\341\330\276F/\236\301R\307"
 #"x\v\334\334\274\205\210\205$E\247q"
 #"\2ZX\377\340\6\37\337\276\315\363\336"
 #"\200\261\370D\252\200\16\346p\2029\334"
 #"R\235\343\251\346\263\317\357\260qc\23\224\1cP\222YA\1hD\204?~"
 #"}\310\203\373?\321i\355\21\217C\202"
 #"B\221\331\372\"\327\256_\347\312\372U\262WQ\20\313\377&"
 #"!= \250$\26\334\0\0\0\0IEND\256B`\202"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"WAY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";Data Types:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; A Cupcake is a Posn"
0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #";; where the numbers represent the respective x,y coordinates of the"
 #" Cupcake in the Room"
) 0 0 23 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"posn-temp"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"c1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"46"
0 0 23 3 1 #" "
0 0 20 3 2 #"47"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"c2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"c3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"c4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; A Waypoint is a Posn"
0 0 23 29 1 #"\n"
0 0 17 3 87
(
 #";; where the numbers represent the respective x,y coordinates of a W"
 #"aypoint in the Room"
) 0 0 23 29 1 #"\n"
0 0 17 3 42 #";; our template is the same as the cupcake"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"75"
0 0 23 3 1 #" "
0 0 20 3 2 #"75"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"250"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 23 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 3 #"mag"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; A Velocity is a (make-velocity Number Number)"
0 0 23 29 1 #"\n"
0 0 17 3 90
(
 #";; where the first number is the angle (in radians) and the second n"
 #"umber is the magnitude"
) 0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"velocity-temp"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 12 #"velocity-mag"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-velocity"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #") "
0 0 14 3 1 #"D"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"mover"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 14 3 3 #"vel"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; A Player is a (make-mover Posn Velocity)"
0 0 23 29 1 #"\n"
0 0 17 3 96
(
 #";; where the Posn represents the position of the Player in the Room "
 #"and the Velocity represents "
) 0 0 23 29 1 #"\n"
0 0 17 3 39 #";; how their position changes over time"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"player-temp"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 4 #"...."
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #") "
0 0 14 3 2 #"v1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; A List of Cupcakes (LOC) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; - empty"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; - (cons Cupcake LOC)"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"list-temp"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"list-temp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 4 #"] ))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc1"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"c1"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc3"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"c2"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"c3"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc5"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"c4"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; A List of Waypoints (LOW) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; - empty"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; - (cons Waypoint LOW)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; our template is the same as the LOC"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low1"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 4 #"low1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low3"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 14 3 4 #"low2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 1 #" "
0 0 14 3 4 #"low3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"low5"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 1 #" "
0 0 14 3 4 #"low4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 3 2 #" ("
0 0 14 3 3 #"loc"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; A Room is a (make-world LOC LOW Player Number) where:"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; -the Number is the time passed in the game"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; -the LOC is a List of Cupcakes in the Room"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; -the LOW is a List of Waypoints in the Room from user input"
0 0 23 29 1 #"\n"
0 0 17 3 90
(
 #";; -the Player is a representation of Henry, the person running arou"
 #"nd and eating cupcakes"
) 0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-temp"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 14 3 4 #"...."
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 14 3 4 #"...."
0 0 23 3 1 #"("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 14 3 4 #"...."
0 0 23 3 1 #"("
0 0 14 3 7 #"world-t"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; examples:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 4 #"loc5"
0 0 23 3 1 #" "
0 0 14 3 4 #"low5"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Main Function"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; NaturalNumber -> NaturalNumber"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; main game function - play the game with n cupcakes"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"play-hungry-henry"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"play-hungry-henry"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"world-t"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"big-bang"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 7 #"on-tick"
0 0 23 3 1 #" "
0 0 14 3 6 #"update"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"stop-when"
0 0 23 3 1 #" "
0 0 14 3 7 #"stop-on"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 8 #"on-mouse"
0 0 23 3 1 #" "
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 7 #"to-draw"
0 0 23 3 1 #" "
0 0 14 3 9 #"draw-room"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; Auxiliary Functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; Wishlist of Big Bang Functions:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 82
(
 #";; to-draw: draw the Player, Cupcakes, and Waypoints in the Room on "
 #"an empty scene"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Room -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"draw-room"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 14 3 11 #"\342\200\234solid\342\200\235"
0 0 23 3 1 #" "
0 0 14 3 3 #"red"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"draw-room"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"overlay-henry"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                      "
0 0 14 3 5 #"SCENE"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"draw-room"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"HENRY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #")) "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; helper function to draw-room"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; draw all of the waypoints on the image"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; LOW Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 5 #"image"
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #")("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 7 #"WAY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 5 #"image"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"overlay-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 5 #"SCENE"
0 0 23 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 7 #"WAY-PIC"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; helper function to draw-room"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; draw all of the cupcakes on the image"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; LOC Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #") "
0 0 14 3 5 #"image"
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #")("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #") "
0 0 14 3 5 #"image"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"overlay-cupcakes"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 5 #"SCENE"
0 0 23 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; helper function to draw-room"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; draw henry on the image"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Player Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"overlay-henry"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"overlay-henry"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 5 #"image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"HENRY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")) "
0 0 14 3 5 #"image"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"overlay-henry"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 9 #"HENRY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #")) "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; on-mouse: add a Waypoint to the end of the Room\342\200\231s LOW"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; Room Number Number MouseEvent -> Room"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"mouse-temp"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 11 #"mouse-event"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"redirect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 7 #"world-t"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"150"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"250"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"75"
0 0 23 3 1 #" "
0 0 20 3 2 #"75"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #" )"
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"world-t"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"FAILURE\""
0 0 23 3 2 #") "
0 0 14 3 12 #"initial-room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; stop-when: all Cupcakes have been eaten"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Room -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"stop-on"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"stop-on"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"stop-on"
0 0 23 3 1 #" "
0 0 14 3 12 #"initial-room"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"stop-on"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 4 #"low3"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 65
#";; on-tick: Move the Player OR Eat a Cupcake, Increment the time "
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; Room -> Room"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"update"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"update-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"move"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-t"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"update"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"update"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; update-cupcakes: Room -> LOC"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; if the player is on a cupcake, remove it."
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"update-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"update-cupcakes"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"world-loc"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"update-cupcakes"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"update-cupcakes"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; update-waypoints : Room -> LOW"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #";; helper function that decides to remove waypoints when the player "
 #"is on them"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"rest"
0 0 23 3 2 #" ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 9 #"world-low"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 3 #")) "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"update-waypoints"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"21"
0 0 23 3 1 #" "
0 0 20 3 2 #"21"
0 0 23 3 3 #")) "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 81
(
 #";; last-scene-expr: draw the number of ticks that it took to eat all"
 #" the cupcakes"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Room -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"end"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"end"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 19 3 14 #"\"game won in \""
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 14 #"number->string"
0 0 23 3 2 #" ("
0 0 14 3 7 #"world-t"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 19 3 8 #"\" ticks\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 20 3 2 #"24"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 3 #"end"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 7 #"overlay"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 21 #"\"game won in 0 ticks\""
0 0 23 3 1 #" "
0 0 20 3 2 #"24"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 96
(
 #";; generates a list of Cupcakes that is the give number, n, Cupcakes"
 #" long, with random positions"
) 0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Number -> LOC"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 5 #"empty"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-BORDER"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-BORDER"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-BORDER"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 3 #") ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-BORDER"
0 0 23 3 6 #"))))) "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 17 #"make-cupcake-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; NOT ON ORIGINAL BLESSED DESIGN"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Put an item, i, at the end of a list, l"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; List Any -> List"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 1 23 65 1 #"\t"
0 0 23 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 1 #"i"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"cons-bottom"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Nudge the Player"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";; based on xf = xi + vt (t is a finite amount of time defined by th"
 #"e designers)"
) 0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Player -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 12 #"velocity-mag"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"cos"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 12 #"velocity-mag"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"sin"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 7 #")))))) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"27"
0 0 23 3 1 #" "
0 0 20 3 2 #"27"
0 0 23 3 2 #") "
0 0 14 3 2 #"v1"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"34"
0 0 23 3 1 #" "
0 0 20 3 2 #"34"
0 0 23 3 2 #") "
0 0 14 3 2 #"v1"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; Jump the Player to a new position"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Player Posn -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-mover"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #") "
0 0 14 3 2 #"v1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 4 #")) ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #") "
0 0 14 3 2 #"v1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;NOT ON WISHLIST"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";;Redirect the player,p, towards the  waypoint, w"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; Player Waypoint -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-mover"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 13 #"make-velocity"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 8 #"fix-atan"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 12 #"velocity-mag"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 3 #"1/4"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 50 #")                                                 "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1/4"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 3 #"1/4"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 14 #"velocity-angle"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 4 #"-1/4"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #") "
0 0 20 3 2 #".2"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; helper for arctan"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; fix the angle problem due to the restricted range of the arctange"
 #"nt"
) 0 0 23 29 1 #"\n"
0 0 17 3 23 #";;Number Number->Number"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"fix-atan"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"atan"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 2 #" ("
0 0 14 3 4 #"atan"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"pi"
0 0 23 3 1 #" "
0 0 20 3 2 #"-2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 91
(
 #";; Answer to Problem 2 (takes a LOW instead of a waypoint, and pops "
 #"off the first waypoint)"
) 0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Move the Player"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #";; choose if we should nudge or jump, depending on distance to the n"
 #"ext "
) 0 0 23 29 1 #"\n"
0 0 17 3 41 #";;    Waypoint and the next next waypoint"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; Player LOW -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 1 #"p"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"redirect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 2 #"p1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"27"
0 0 23 3 1 #" "
0 0 20 3 2 #".2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 1 #" "
0 0 20 3 2 #"80"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"27"
0 0 23 3 1 #" "
0 0 20 3 2 #".2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"25"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"25"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; Should the player jump?"
0 0 23 29 1 #"\n"
0 0 17 3 89
(
 #";; return if the distance of the Player\342\200\231s Posn and the Wa"
 #"ypoint\342\200\231s Posn  is less than "
) 0 0 23 29 1 #"\n"
0 0 17 3 55
(
 #";;    or equal to the Player\342\200\231s Velocity\342\200\231s Magn"
 #"itude"
) 0 0 23 29 1 #"\n"
0 0 17 3 29 #";; Player Waypoint -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 12 #"velocity-mag"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-vel"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"35"
0 0 23 3 1 #" "
0 0 20 3 2 #"35"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; Is the player on a cupcake? "
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Player LOC- > Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 1 23 65 1 #"\t"
0 0 23 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"           [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #") ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"on-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; Eat Cupcake"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; Remove a cupcake from the list of cupcakes (LOC)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Player LOC - > LOC"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 4 #"  [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mover-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #") ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 3 #") ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"loc"
0 0 23 3 15 #"))))]))        "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"eat-cupcake"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 1 #" "
0 0 20 3 2 #"50"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; Calculate the distance between two Posns (dis) "
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; Posn Posn -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"sqrt"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 5 #"))) ("
0 0 14 3 3 #"sqr"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 1 #" "
0 0 14 3 2 #"c1"
0 0 23 3 1 #" "
0 0 14 3 2 #"c2"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")) "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; PROBLEM 2"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; id: Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; The input creates a list of numbers of length n with values at ea"
 #"ch position of their position"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; the template for an atomic data (Number) is the same as the heade"
 #"r"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 8 #"identity"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; id+1: Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 101
(
 #";; The input creates a list of numbers of length n with values at ea"
 #"ch position of their position + 1"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"id+1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"id+1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 1 23 65 1 #"\t"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"id+1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"id+1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"id+1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; takes a number and creates a list of numbers of length n where "
0 0 23 29 1 #"\n"
0 0 17 3 7 #";; each"
0 0 17 3 1 #" "
0 0 17 3 4 #"next"
0 0 17 3 1 #" "
0 0 17 3 6 #"number"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"negative"
0 0 17 3 1 #" "
0 0 17 3 5 #"power"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 7 #"number "
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pow-ten"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pow-ten"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 4 #"expt"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pow-ten"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pow-ten"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1/10"
0 0 23 3 1 #" "
0 0 20 3 5 #"1/100"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"pow-ten"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 4 #"1/10"
0 0 23 3 1 #" "
0 0 20 3 5 #"1/100"
0 0 23 3 1 #" "
0 0 20 3 6 #"1/1000"
0 0 23 3 1 #" "
0 0 20 3 7 #"1/10000"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; get-evens: Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; creates the list of the first n even numbers;"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; counts zero as even"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-evens"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-evens"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-evens"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-evens"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-evens"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; diagonal: Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; creates"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 5 #" list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 75
(
 #" lists of 0 and 1 in a diagonal arrangement that is a box of nxn cha"
 #"racters"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"diagonal"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"diagonal"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"diagonal"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"diagonal"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 37 #")))                                  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"diagonal"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; Finally"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"define"
0 0 17 3 496
(
 #" tabulate from exercise 210 using build-list.                       "
 #"                                                                    "
 #"                                                                    "
 #"                                                                    "
 #"                                                                    "
 #"                                                                    "
 #"                                                                    "
 #"                    "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"tabulate"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"tabulate"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; tabulate-v2: (Number->Number) Number -> [Listof Number]"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";; takes a number and gives back that list n+1 starting from the top"
 #" going down"
) 0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; explanation f is the function to that does a calculation on a num"
 #"ber"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"..."
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 1 #"f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 8 #"tabulate"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 8 #"tabulate"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"tabulate-v2"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #") ("
0 0 14 3 8 #"tabulate"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; PROBLEM 3"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; starts-with: String String -> Boolean "
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; takes a string and sees if it has a specific prefix (case sensiti"
 #"ve)"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 16 #"string-contains?"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Brett\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Brett\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Billy\""
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 23 3 1 #" "
0 0 19 3 9 #"\"Charlie\""
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; find-name: String [Listof String] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 93
(
 #";; Takes a string and looks if that string (or extension of the stri"
 #"ng) is in the list or not"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-name"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"lon-temp"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"lon-temp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; we technically don't need this template though"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-name"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 14 3 1 #"S"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 1 #"S"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 1 #"S"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"ormap"
0 0 23 3 1 #" "
0 0 14 3 9 #"contains?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-name"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"ted\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"ted\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-name"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"ted\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"teddy\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-name"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"ted\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"xxted\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; all-start-with: String [Listof String] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; checks to see if every string in the list starts with a given str"
 #"ing"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"all-start-with"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"all-start-with"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 12 #"starts-with?"
0 0 23 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"andmap"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"all-start-with"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"buzz\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"bizz\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"busy\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"bee\""
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"all-start-with"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"buzz\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"bizz\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"busy\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"bee\""
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; all-start-with-a: [Listof String] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; checks to see if all strings in the list start with \"a\""
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-start-with-a"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-start-with-a"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"all-start-with"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-start-with-a"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"adam\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"aaron\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"all-start-with-a"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"badam\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"aaron\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";; You should use andmap to define a function that ensures that no n"
 #"ame on"
) 0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; some list exceeds some given width. You sould use andmap because "
 #"it will "
) 0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #";; go through the entire list checking each string to see if every s"
 #"tring on "
) 0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";; the list fits the criteria. When one string fails to meet the cri"
 #"teria,"
) 0 0 23 29 1 #"\n"
0 0 17 3 73
(
 #";; andmap will use short circuit evaluation and immediately return f"
 #"alse."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; PROBLEM 4"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; [Listof X] [Listof X] -> [Listof X]"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; combines two Lists to create one with foldr"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldr"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldr"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; [Listof X] [Listof X] -> [Listof X]"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; combines two Lists to create one with foldl"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldl"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldl"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 23 3 1 #" "
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldl"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldl"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"  "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"append-from-foldl"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; Conclusion: foldr and foldl append the items in the opposite orde"
 #"r"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; [Listof Number] -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; adds all elements of the list"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sum-list"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sum-list"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sum-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sum-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"sum-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 3 #")) "
0 0 20 3 2 #"26"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; [Listof Number] -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; takes the product of all elements in the list"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mult-list"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mult-list"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"lon"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mult-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mult-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mult-list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 3 #")) "
0 0 20 3 4 #"1680"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; juxtapose:(Image Image -> Image) [Listof Image] -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; overlays all images with a given function on an empty image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"juxtapose"
0 0 23 3 1 #" "
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"juxtapose"
0 0 23 3 1 #" "
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 14 3 11 #"empty-image"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"juxtapose"
0 0 23 3 1 #" "
0 0 14 3 5 #"above"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"green"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 23 3 4 #"))) "
0 12           4 55 687
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #("
 #"struct:ellipse 30 30 0 255 \"red\"))) #(struct:translate 0 30 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:"
 #"ellipse 30 30 0 255 \"blue\"))) #(struct:translate 0 30 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellips"
 #"e 30 30 0 255 \"green\"))) #(struct:translate 0 30 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellipse 30 "
 #"30 0 255 \"yellow\"))) #(struct:translate 15 30 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 0 0) #(struc"
 #"t:point 0 0) #(struct:point 0 0)) 255 \"black\")))))))))) #(struct:b"
 #"b 30 120 120) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; [Listof Image] -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; overlays all images vertically on an empty image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"juxtapose-vertically"
0 0 23 3 1 #" "
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"juxtapose-vertically"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"juxtapose"
0 0 23 3 1 #" "
0 0 14 3 5 #"above"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"juxtapose-vertically"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"green"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                          ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 23 3 4 #"))) "
0 12           4 55 687
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #("
 #"struct:ellipse 30 30 0 255 \"red\"))) #(struct:translate 0 30 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:"
 #"ellipse 30 30 0 255 \"blue\"))) #(struct:translate 0 30 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellips"
 #"e 30 30 0 255 \"green\"))) #(struct:translate 0 30 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellipse 30 "
 #"30 0 255 \"yellow\"))) #(struct:translate 15 30 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 0 0) #(struc"
 #"t:point 0 0) #(struct:point 0 0)) 255 \"black\")))))))))) #(struct:b"
 #"b 30 120 120) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; [Listof Image] -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; overlays all images horizontally on an empty image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 22 #"juxtapose-horizontally"
0 0 23 3 1 #" "
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 22 #"juxtapose-horizontally"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"juxtapose"
0 0 23 3 1 #" "
0 0 14 3 6 #"beside"
0 0 23 3 1 #" "
0 0 14 3 3 #"loi"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 22 #"juxtapose-horizontally"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"green"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 23 3 4 #"))) "
0 12           4 55 686
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #("
 #"struct:ellipse 30 30 0 255 \"red\"))) #(struct:translate 30 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:"
 #"ellipse 30 30 0 255 \"blue\"))) #(struct:translate 30 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellips"
 #"e 30 30 0 255 \"green\"))) #(struct:translate 30 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 15 15 #(struct:ellipse 30 "
 #"30 0 255 \"yellow\"))) #(struct:translate 30 15 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:point 0 0) #(struct:point 0 0) #(struc"
 #"t:point 0 0) #(struct:point 0 0)) 255 \"black\")))))))))) #(struct:b"
 #"b 120 30 30) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; PROBLEM 5"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Interpret [List-of [Number -> Number]]:"
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #";; This is a list of functions that consume a number and give back a"
 #" number"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; chain: [Listof (Number -> Number)] Number -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";; composes a function of each element of the list and applies it to"
 #" the given number"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"chain"
0 0 23 3 1 #" "
0 0 14 3 3 #"lof"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"chain"
0 0 23 3 1 #" "
0 0 14 3 3 #"lof"
0 0 23 3 1 #" "
0 0 14 3 4 #"base"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"run"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"run"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 7 #"compose"
0 0 23 3 1 #" "
0 0 14 3 8 #"identity"
0 0 23 3 1 #" "
0 0 14 3 3 #"lof"
0 0 23 3 2 #") "
0 0 14 3 4 #"base"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"chain"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"chain"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0           0
