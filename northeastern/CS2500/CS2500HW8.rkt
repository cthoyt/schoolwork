#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 77 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 1585 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 194
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e |Fundies Pset 8|) (read-case-sensitive #t) (teachpacks ()) (htdp-s"
 #"ettings #(#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; Authors:"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";;     Charles Hoyt  hoyt.ch@husky.neu.edu"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";;     Amanda Kerr   kerr.a@husky.neu.edu"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Problem 1 - Step 1"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 2 #"ol"
0 0 23 3 2 #" ("
0 0 14 3 4 #"over"
0 0 23 3 1 #" "
0 0 14 3 5 #"under"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 2 #"be"
0 0 23 3 2 #" ("
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 2 #"al"
0 0 23 3 2 #" ("
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; An IG is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; \342\200\223 an Image"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; \342\200\223 (make-ol IG IG)"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; \342\200\223 (make-be IG IG)"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; \342\200\223 (make-ab IG IG)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Template:"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"image?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 2 #"ig"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 3 #"ol?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"ol-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"ol-under"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 3 #"be?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"be-left"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"be-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 3 #"ab?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 6 #"ab-top"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"ig-temp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"ab-bottom"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; to-image: IG -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; folds images in an IG with methods based on their container"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 7 #"make-ol"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 4 #"))) "
0 12           4 4 293
(
 #"(#(struct:overlay #(struct:translate 5 5 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 0 0 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point"
 #" 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\")))) "
 #"#(struct:bb 30 30 30) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 7 #"make-be"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 4 #"))) "
0 12           4 4 294
(
 #"(#(struct:overlay #(struct:translate 0 5 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 20 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:poin"
 #"t 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\"))))"
 #" #(struct:bb 50 30 30) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 7 #"make-al"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 4 #"))) "
0 12           4 4 294
(
 #"(#(struct:overlay #(struct:translate 5 0 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 0 20 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:poin"
 #"t 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\"))))"
 #" #(struct:bb 30 50 50) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"image?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 2 #"ig"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"ol?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 7 #"ol-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 8 #"ol-under"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"be?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 6 #"beside"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 7 #"be-left"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 8 #"be-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 3 #"al?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 5 #"above"
0 0 23 3 2 #" ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 6 #"al-top"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"to-image"
0 0 23 3 2 #" ("
0 0 14 3 9 #"al-bottom"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Problem 1 - Step 2"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"ol*"
0 0 23 3 2 #" ("
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 6 #"others"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"be*"
0 0 23 3 2 #" ("
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 6 #"others"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"al*"
0 0 23 3 2 #" ("
0 0 14 3 4 #"base"
0 0 23 3 1 #" "
0 0 14 3 6 #"others"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; An IG* is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; \342\200\223 an Image"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; \342\200\223 (make-ol* IG* [List-of IG*])"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; \342\200\223 (make-be* IG* [List-of IG*])"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; \342\200\223 (make-al* IG* [List-of IG*])"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; Templates: "
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"image?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 3 #"ol?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"ol-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 13 #"ig*-list-temp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"ol-under"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 3 #"be?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"be-left"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 13 #"ig*-list-temp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"be-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"          [("
0 0 14 3 3 #"al?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 2 #" ("
0 0 14 3 6 #"ab-top"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 13 #"ig*-list-temp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"ab-bottom"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 4 #" ]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"ig*-list-temp"
0 0 23 3 1 #" "
0 0 14 3 3 #"igl"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"igl"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"igl"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 3 #"..."
0 0 23 3 3 #"  ("
0 0 14 3 8 #"ig*-temp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"igl"
0 0 23 3 3 #")) "
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 13 #"ig*-list-temp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"igl"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; ig*->image: IG* -> Image;"
0 0 23 29 1 #"\n"
0 0 17 3 65
#";; takes an IG* and does all of the operations respective to its "
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;   constituents"
0 0 17 3 1 #"'"
0 0 17 3 14 #" structs deals"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 2 #" ["
0 0 17 3 6 #"Listof"
0 0 17 3 1 #" "
0 0 17 3 3 #"IG*"
0 0 17 3 2 #"] "
0 0 17 3 2 #"by"
0 0 17 3 1 #" "
0 0 17 3 7 #"mapping"
0 0 17 3 1 #" "
0 0 17 3 4 #"each"
0 0 17 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 7 #";;   to"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 5 #"Image"
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 7 #"folding"
0 0 17 3 1 #" "
0 0 17 3 4 #"over"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 5 #" list"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 8 #"make-ol*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 5 #")))) "
0 12           4 4 293
(
 #"(#(struct:overlay #(struct:translate 5 5 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 0 0 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:point"
 #" 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\")))) "
 #"#(struct:bb 30 30 30) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"make-be*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 5 #")))) "
0 12           4 4 294
(
 #"(#(struct:overlay #(struct:translate 0 5 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 20 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:poin"
 #"t 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\"))))"
 #" #(struct:bb 50 30 30) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"make-al*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 5 #")))) "
0 12           4 4 294
(
 #"(#(struct:overlay #(struct:translate 5 0 #(struct:translate 10 10 #("
 #"struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 0 20 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struct:poin"
 #"t 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue\"))))"
 #" #(struct:bb 30 50 50) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"image?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 2 #") "
0 0 14 3 2 #"ig"
0 0 23 3 5 #"]    "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 4 #"ol*?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"i1"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 1 #" "
0 0 14 3 2 #"i1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 2 #" ("
0 0 14 3 8 #"ol*-base"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #" ("
0 0 14 3 10 #"ol*-others"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 4 #"be*?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"i1"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 3 #") ("
0 0 14 3 6 #"beside"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 1 #" "
0 0 14 3 2 #"i1"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 2 #" ("
0 0 14 3 8 #"be*-base"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #" ("
0 0 14 3 10 #"be*-others"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"         [("
0 0 14 3 4 #"al*?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #") ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"i1"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 3 #") ("
0 0 14 3 5 #"above"
0 0 23 3 1 #" "
0 0 14 3 2 #"i2"
0 0 23 3 1 #" "
0 0 14 3 2 #"i1"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 2 #" ("
0 0 14 3 8 #"al*-base"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #" ("
0 0 14 3 10 #"al*-others"
0 0 23 3 1 #" "
0 0 14 3 2 #"ig"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; more complicated tests:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"make-al*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"green"
0 0 23 3 5 #")))) "
0 12           4 4 425
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 5 0 #(struct:translate 10"
 #" 10 #(struct:ellipse 20 20 0 255 \"red\"))) #(struct:translate 0 20 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(struc"
 #"t:point 30 0) #(struct:point 30 30) #(struct:point 0 30)) 255 \"blue"
 #"\"))))) #(struct:translate 5 50 #(struct:translate 10 10 #(struct:el"
 #"lipse 20 20 0 255 \"green\")))) #(struct:bb 30 70 70) #f)"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; [Listof IG*] -> [Listof Image]"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; maps each IG* to an image"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"lig->li"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 10 #"ig*->image"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; more complicated tests:"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"lig->li"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-ol*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 3 #") ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"red"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; Problem 2 - Alternate Hungry Henry Data Definition and Wish List"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 1 #" "
0 0 20 3 3 #"500"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"SCENE-PADDING"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 17 3 31 #";; global magnitude of velocity"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"HUMAN-PIC"
0 0 23 3 1 #" "
0 2          19 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           4 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\30\0\0\0\32\b"
 #"\6\0\0\0\255\277\234\363\0\0\6\370IDATH\211]\226Yl\234W\25"
 #"\307\177\367\336\357\233\361\254\36/3v"
 #"\274\20\307\211\2358n\342f!q\232\270YQ\35\n\25\2D\4\210n\244\""
 #"\242,\355\3\22Ry\202\27T\251 !\201\4\2\204\324\202Z\20\2\322\204\246"
 #"\201\240\204\244\302J\28\211S\333\261"
 #"\223x\231x\231\314x\231}\276\355\3620iZq^\256\256\256t\256\376\377s"
 #"\357\371\35\241\35\255]\0170A\3\322"
 #"\363\220\2\320\26\340\201P\340y\344\246\223\314LM\20\212\5Yu,:6m"
 #"'\34\255G\341\2\2\a\3]M\3\256\aB\2`\0(\3\\\300u\35\f"
 #"e\00067\257^f.9M4\34a\364\306uf\306\306Y\315dp\245E"
 #"\272\220\347\304K\337e\367\300\343(_"
 #"\0\244\17\4\325\320\200\250n<\r\302"
 #"\323\256\206\17\317\301\3\257\302\3117~"
 #"\315w\276\375-^|\341\31\2425&\252\354`\225\212D\242A\22m-\214\316"
 #"\3140\223Z\346\251\317~\231=\a\6!\24A#\21\256\aR\242\265\4\371\301"
 #"\5Z\343:\16\206Q\265cf\354\6\277\377\335/\330\273\275\227\r-q2\311"
 #"Yr\3673\344\263Y\224\4_8H}[+\377\36\31\347\365\267\336\341\363O"
 #"\277\300W\276\376\"f \b\332\0$ZH\34\rRh\t\236\250ZS\252\360"
 #"\307_\376\206#{\6\370\344\321\243|"
 #"|\327\16\374\270\204\375\212P\320$V\27$\30\365S\37\217R\37\vr`\340"
 #"1\216}\3563\374\354\307\257\361\336\271"
 #"3\200\3\256\3\302C\343\"\5H\267"
 #"\342 \4\224W\226\371\346\211\343"
 #"|\343\304\327\370\303\233\277e\343\372N\226R)\226"
 #"\323\367\361*%LC \205\207\326\232J\245\202\337"
) 500
(
 #"\347\2439\236\340\360\301Cl\353\333\312"
 #"\17\276\367\n\351\251;`\bl\327A"
 #"\240\21\330H\3457@\270\234\177\367m"
 #"\316\236\376\23?\374\321\367\351\335\361\b"
 #"JJ\234|\211\374\312*\305\\\36\247P\300\312\25(\346\362d3Y\212+\25"
 #"\360\24m\35\235\364\367\357b\370\332\24"
 #"C\227.\342\272\16B)\4 \252U\361\300\265\2713\371>\211\206({\36\337"
 #"\203\21\217\201\326H\r\2464Q\236@\270\2\211\201)|H\341c~.M\245"
 #"\354A\242\t\345\3633\270\177+\377\271r\205L&\203FS}8\2\t\36V"
 #"\251\300\302\302<\237x\342\b\315-M"
 #"\340\331x\256C\270\266\26S\231\344V"
 #"\2138\266\2406\32\307P!\202\201:\352\e[\251\t\327\2014\350\352\351aC"
 #"W\27\343\343\343\334z\377&\6\22\253R\1-\220\0\276@\2205\215M\270E"
 #"\233\364\302\"8.\3220\261Jef\347S\24,\207\344\\\206\321[\323\\\277"
 #"u\207\277\236\273\300_N\236\342\336\334"
 #"<x\232\356\236\315,gs\\\2720\204O\b\4\32\237\317\17Zc\270\216\203"
 #"B\361\330\266~\236\177\355'<\373\334"
 #"q\254\205%\316\237\37237\256\16\261"
 #"\2604\307\316\276\35t\264\266\363\217\363"
 #"\227\30\32\35\306\301#j\206p|>"
 #"^\336\271\213\372\306F\244\241\260mP"
 #"\266\5\266\5\312\17B!\225\241\0A[\274\5\277P\4\244bb\344:\27\316"
 #"\274\303r&\305\331s\327\t\307\e\331"
 #"}\360\20\365k\326\220+\344)\346s"
 #"\364\357\332\216O\302\304\265k\250p\230"
 #"x<N[k\224\277\235:\211\263\224"
 #"\1\333\256*\360p\221\322\305\266\212\264"
 #"5\305\321\245\34\246[\346\360\376~F"
 #"F\206\211\372\241\263c\35y\327\342\300\340ab\365\1\206/\17\241\363+"
 #"|l\355Z\264]\206r\211\355[\372X\234\236!\237J\221N\316\320\34k"
) 500
(
 #"\0\1\206\203\207\17\210\324F)\224\362\254f\227hmk\"s\3576]]]"
 #"\274\365\3463\264l\352\301*\33045"
 #"5\321\275\276\23\263RB\270\36k\333"
 #"\333\361\e\n\264\346\300\300>\376\373\336"
 #"%*\305\2\206\266\301\220 \4RQ\3Z\222u*|\351\370sx\1\205m"
 #"@\274\275\235\201#\203\24+\200cR)X\230\30(i\362\366\2313\244Wr"
 #"\314\334[ \221H\200!\b4\304yt\363f\354R\1%=\0\234r\5C"
 #"#@\31\330\206I$\21\2471\321L4Z\203\256k\340\354\331\277S\327\330J"
 #"8\332\300\335\211Yfg&q\355\25\332:\326r\356\342E\326-fh\355\355"
 #"e[S3\263c\23D\23-|\341\331\347\251\353\334\0\36\0305~\214\a\375"
 #"\225\206\3466\2727m\241\222-0:1Njf\232\333\243\243|\365\304An"
 #"\216\215\362\322\313\257`\331.\307\216\35"
 #"b\367\300\0\205\242M(\22\341\356\355;\364\355\256@$F\327\276CUE\301"
 #"\20x\0\22akG+<\204\v,\247X\232\231d\370_\347Y\270{\213D"
 #"\"\201/\24\341\336\3022VI\200\360"
 #"\210\306\24\247O\237\304*U\350\337\267"
 #"\237\332\246f\236\372\342\323D\332\272\300"
 #"\37Dk\215\326\32\317\3\30300\24\252\252A9P_O}\270\217Xr\226"
 #"L\352\36#\243#\344-\311\340\23\237"
 #"\246\326\37\344\366\370\30\263s\323l\351"
 #"\351e%_ \321\322\n\206A6\233%\342y\17\211\"\245D\312\217\20\255\n"
 #"\"\211\355:\370\374!\0343\214\255|\254\337\324Kw\3576L\24?}\365U"
 #"\306o\2160\370\251'iiocc\242\t_\240\206\262\343!\204\300\262,|"
 #"5\232\377\17C<Hn\271\32\303\f\241\201\366\215=\270\371\fT"
 #"V)[%\362\3052\275\217l$\26\16`\3336\3220\331\266s"
) 341
(
 #"'eOS,\26\211F\243\370B!\20\342!\31]\327E)UU \250\2"
 #"G\3\256\vk\326\255gM<\306\360?\337\245>\26\"\227N\321\275\271\a\333"
 #"r\261\205\246{\313\26\"\261F\2B\23\216\332\17H\353=X<\244\224(\245"
 #"\320ZW\273\251\3538H@;\325\377\201\v\4\"lzt'\205B\16\2414"
 #"\227\257]chd\204\331\314\22\251\325"
 #"\25\322\331,\313\271\"\311d\222B\241@j~\36t\325\367\17\n-\204@z"
 #"\236\207a\30x\16\230\262\312|\204\0aR\266]JV\205\211\333\223\330B0"
 #"\277\274\304\305+W\31\31\237\244\255\243"
 #"\223\321\261q\346\346\347\361\204`r\342"
 #"\16\236\353\"\245D\210\17G\b)\245\201\326\32\245>2Z\bErj\222\251"
 #"\344,\266\3\351\245U\216<y\0243"
 #"\24\342V\262\310\317\177\365:\205\212E\264.F&\263L0\30$\235N\223\313"
 #"\345p\34\247\232B\210\252\n\255\265~8\317\0X\200tY\\\234F\227W\210"
 #"\212\n\305\325\f\221\272F\246\222s,.\346p\20\354\335\273\227|~\205lj"
 #"\221u[\373\230\274{\237x{\a\376\200\217\232\232\32\34\247\352\314"
 #"\377\0\313\3535\344\25\1\26}\0\0\0\0IEND\256B`\202"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"WALKER-PIC"
0 0 23 3 1 #" "
0 2          15 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           2 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\20\0\0\0\21\b"
 #"\6\0\0\0\324\257,\304\0\0\2\371IDAT8\215mS;Kk[\30"
 #"\234\265\366&\6\265\311=\20\301\250A\bV\21\213\250\1%X\tVjco"
 #"!\344w\330h\251\225\245Z\370\300G\247\0266)LP\24\203(\212hR\4"
 #"\"\21\342&97\233\274t\2555\267\310M8\27\356T\337\a3|\217a\240"
 #"\265\2461\206m\334\335\335\361\364\364\224"
 #"Zk*\245\250\265\346\317\317\17I\262X,\262\321ht\270ZkJ)%\204"
 #"\20h4\32\0\200B\241\200`0\210\227\227\27X\226\5)%H\"\227\313\341"
 #"\344\344\4\245R\t$\1\0B\b\330$!\204\200\327\353\205\3438\250T*p"
 #"]\27\3\3\3x{{CWW\27>>>\220L&188\bc\f\264"
 #"\326\260m\e$a\ecZ\205m#"
 #"\227\313\301\347\363\341\372\372\32\331l\26"
 #"\311d\22\211D\2\0000;;\213j\265\212H$\202@ \0\245\24l\333\206"
 #"l\257\371\374\374\214x<\216@ \200"
 #"\361\361q\254\256\256\"\26\213!\221H`gg\a}}}(\227\313p]\267"
 #"s\202R\n \311t:M\0\4\300\345\345e\2\340\326\326\26I\362\363\363\223"
 #"___|\177\177\347\371\3719\17\17"
 #"\17\377\363t\224\313e\6\203A\2\340"
 #"\320\320\20-\313\242eY\234\237\237g"
 #"\245R\341\361\3611\327\326\326X\253\325"
 #"\230\317\347\271\273\273\313\203\203\3^]]\321q\34bcc\243#\6\300P("
 #"D\0\234\233\233\243R\212$;6\266-\277\277\277'\0\356\355\355Q\306b1"
 #",,, \237\317cxx\30\331l\26\0\20\215F\1\0\306\30\330\266\215|"
 #">\217L&\203R\251\4\307q\20\217\307\341"
 #"\367\373\201B\241\300\221\221\21NLLPJ\311"
) 318
(
 #"\245\245%\336\336\336R)\305\357\357o"
 #"\32c\230J\245833C\277\337\317"
 #"\311\311I\36\35\35\361\346\346\206\245R"
 #"\211\342\351\351\211\265Z\r\353\353\353\350"
 #"\355\355\305\366\3666<\36\17\376\304\353"
 #"\353+\232\315&\\\327\305\376\376>\302\3410\246\246\246066\6{tt\24"
 #"\365z\35>\237\17\233\233\233\360x<\250\327\353\260m\e\265Z\rggg\360"
 #"x<\350\356\356\206\327\353\305\342\342\".//\21\211D`YV\313\306b\261"
 #"\310t:\315\266\245\217\217\217t\34\207"
 #"\361x\234\311d\222\325j\225\306\30\272"
 #"\256\313T*\305L&C\2555\233\315&\305\277\337\205eY\250\327\353xxx"
 #"@\265Z\305\305\305\5VVV\20\16\207\241\224\202eY \t)%\2141\20"
 #"B@\b\1\331\26\223\204\326\32\321h\24\211D\2\241P\250#\266m\273E\226"
 #"\22J)\b!@\262\25\1)%\0\200$zzz \204\300\364\3644\372\373"
 #"\373\377wb;D\355\224\nMC\0\20\02004\220B\342\367\337\277\241\265\306"
 #"\257\277~\301\260%\376\23\2\255\236 \376\1\217\31\36"
 #"\n\343gW\226\0\0\0\0IEND\256B`\202"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"CUP-PIC"
0 0 23 3 1 #" "
0 2          15 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           2 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\17\0\0\0\17\b"
 #"\6\0\0\0;\326\225J\0\0\2\261IDAT(\221%\316Ko\224U\34"
 #"\300\341\3379\347\275\315\2753\3662\5ki\300\230&\340\2\213$T\223\22$"
 #"MPW.\210\356t%\37\200\255&~\e\27\304\27071\221(\30\25A4"
 #"%u\246uh\2473\224v:\235\333;\357\345\274\177\27<\237\340Q\"\211\200"
 #"FR\2152\220I\212\322\200\30\254RX^\321\222\341* \265`\24\242@\211"
 #"XIl\2066\16\221\0\nR\240w\0321\30\305\210\347S\251z\224\35p\1"
 #"\37\310\342\b\337sQV2IQ\f2\350\16CZ\207\2474\367\17\351\365#"
 #"\374|\225\343\301\24\353\n\313\27f9"
 #"\177\246\302Z-O\25\b\4\234\24\305\24\330iw\230\230<Nq\36\267\354\223"
 #"s\25\371\322\fGQ\a\345\303a\342\362\367\203\307\354.T\371dm\225b\2"
 #"j,\"/\6\23Be8\215\f\317\17FDR\300\270.\215f\237\331j@"
 #"\26(\232\275\3\234\212\317(\354\263R"
 #"\366\371\342\362y\364p\2320\34\217\310"
 #"\225|\22\233\261\177\320\245\20\270\330\b"
 #"N^\276\0I\251\226}\264v\310\264"
 #"\213-\227\371\255\261Mw\224\240\367["
 #"\r\216^v\210S\20\317\341\354\e\313"
 #"`\300J\312\265\367\336\"v\25}\v\265\327\27\b*\1Q\330\247\337m\243F"
 #"\23\264\e\207<}\370\vv\320c\276\244\251\325r<\331zJ\230\r\360k\20"
 #"\352\230\277\232\317\20\235\22\17\2178\331"
 #"\372\235\342\270K\321d\350\267/\274I"
 #"\332n\363\350\273o\211[M\262\344\210\225\325\263T\226fh\366\6H\33603"
 #"W\241\265\263\315\336\243\237Y\352"
 #"\377\313\207\347J\234\233\253\340`<676\370\346"
 #"\353\257\330\333m\261\270v\25\267\276\300I7\303Z"
) 246
(
 #"AB0\341\4\247wH\376\370?\206\333O\270\371\321]\220\4\a\355q\361\312"
 #":\256\311\363\343\275{\254n\375\311\342"
 #"\362<\221J\3005\270N@I;\244\247}\332\215]\362A\225\372\322%\304f"
 #"8h\5\271\34\227\336\271\314\17\337\357"
 #"\260\367\354\37\32\217\357\343\25\2\274\300"
 #"\305(\2078\216\31L&t\372!\267>\375\222\240P\3R4\32 \343\335\215"
 #"\367\231\370>\314/\341\234Y\305\231\275"
 #"\310\324[\341\330\276F/\236\301R\307"
 #"x\v\334\334\274\205\210\205$E\247q"
 #"\2ZX\377\340\6\37\337\276\315\363\336"
 #"\200\261\370D\252\200\16\346p\2029\334"
 #"R\235\343\251\346\263\317\357\260qc\23\224\1cP\222YA\1hD\204?~"
 #"}\310\203\373?\321i\355\21\217C\202"
 #"B\221\331\372\"\327\256_\347\312\372U\262WQ\20\313\377&"
 #"!= \250$\26\334\0\0\0\0IEND\256B`\202"
) 0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"WAY-PIC"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; A Cupcake is a Posn"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; A Waypoint is a Posn"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 23 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 23 3 1 #" "
0 0 14 3 9 #"magnitude"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; A Velocity is a (make-velocity Number Number)"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; Parameters:"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";;   1. an angle (in radians) "
0 0 23 29 1 #"\n"
0 0 17 3 32 #";;   2. a non-negative magnitude"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 6 #"player"
0 0 23 3 2 #" ("
0 0 14 3 4 #"name"
0 0 23 3 1 #" "
0 0 14 3 3 #"pos"
0 0 23 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 23 3 1 #" "
0 0 14 3 9 #"waypoints"
0 0 23 3 1 #" "
0 0 14 3 3 #"pic"
0 0 23 3 1 #" "
0 0 14 3 5 #"score"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";; A Player is (make-player String Posn Velocity [Listof Waypoint] I"
 #"mage Number)"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #" ("
0 0 14 3 3 #"loc"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 5 #"ticks"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";; A World is a (make-room [Listof Cupcake] Player [Listof Player] N"
 #"umber)"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Main Function"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; play: Number Number String -> World"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; Parameters:"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";;   1. Number cupcakes"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";;   2. Number random-walk players"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";;   3. Name of human player"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; gives back the final world"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"play"
0 0 23 3 1 #" "
0 0 14 3 4 #"n-cc"
0 0 23 3 1 #" "
0 0 14 3 4 #"n-rw"
0 0 23 3 1 #" "
0 0 14 3 4 #"name"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; Auxilliary Function Wish List"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Big Bang Functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; add-waypoint: World Number Number MouseEvent -> World"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; adds a waypoint to the Player's list "
0 0 23 29 1 #"\n"
0 0 17 3 8 #";;    of"
0 0 17 3 1 #" "
0 0 17 3 9 #"Waypoints"
0 0 17 3 1 #" "
0 0 17 3 5 #"based"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 12 #" coordinates"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"add-waypoint"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; tick: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; moves each player, has each player consume appropriate cupcakes, "
0 0 23 29 1 #"\n"
0 0 17 3 15 #";;   increments"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 5 #" time"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"tick"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; draw: World -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; draws the players, their waypoints, and the cupcakes"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; last-scene: World -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; draws an end game screen based on the final World. "
0 0 23 29 1 #"\n"
0 0 17 3 10 #";;   shows"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"player"
0 0 17 3 1 #"'"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 5 #"score"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 5 #" time"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"last-scene"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Helper Functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; make-posn-list: Number -> [Listof Posn]"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; makes a list with a given Number of random Posns"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-posn-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; make-random-posn: Image Number -> Posn"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; makes a posn inside the graphics coordinates "
0 0 23 29 1 #"\n"
0 0 17 3 7 #";;   of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"image"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 8 #" padding"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-random-posn"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #" "
0 0 14 3 7 #"padding"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; make-walkers: Number -> [Listof Player]"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; make a list of players"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"make-walkers"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; move: Player -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; chooses whether the player should nudge or "
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;   jump"
0 0 17 3 1 #" "
0 0 17 3 5 #"based"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #"'"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 8 #"location"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 4 #"next"
0 0 17 3 9 #" waypoint"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; nudge: Player -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; move the player based their velocity"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"nudge"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; jump?: Player -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; is the distance of from the player to its its next waypoint is le"
 #"ss than "
) 0 0 23 29 1 #"\n"
0 0 17 3 56
(
 #";;    or equal to the Player\342\200\231s Velocity\342\200\231s Magn"
 #"itude?"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"jump?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; jump: Player Posn -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; relocates the player to a new position"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 23 3 1 #" "
0 0 14 3 6 #"player"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; on-waypoint? : Player -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; returns if the player is on the next waypoint"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"on-waypoint?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; pop-waypoint: Player -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; remove the first waypoint from the player"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"pop-waypoint"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; redirect: Player Posn -> Player"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; changes the direction of the Player to be towards the given Posn"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"redirect"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; on-given-cupcake?: Player Cupcake -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; is the player on a given cupcake?"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"on-given-cupcake?"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; remove-cupcake: Player [Listof Cupcake] -> [Listof Cupcake]"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; remove (eat) a cupcake from the list of cupcakes (LOC)"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"remove-cupcake"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; Utilities"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; distance: Posn Posn -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; calculates the distance between two posns"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"distance"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; queue: [Listof X] X -> [Listof X]"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; puts an element at the bottom of a list "
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 3 2 #" ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"queue"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 2 #"el"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0           0
